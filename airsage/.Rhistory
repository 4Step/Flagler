# District to district flows (limit this to Flagler districts)
trips_by_OD <- trips_by_OD[,2:41]
trips_by_OD[is.na(trips_by_OD)] <- 0
m <- as.matrix(trips_by_OD)
dist <- c(1:40)
dimnames(m) <- list(Origins = dist,Destinations = dist)
groupColors <- colors()[dist]
chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyr)
library(dplyr)
library(knitr)
library(leaflet)
library(rgdal)
library(htmltools)
library(readr)
library(chorddiag)
# Used for computing district centroids
library(maptools)    # SpatialPolygons2PolySet
library(PBSmapping)  # calcCentroid
library(geosphere)
# User inputs
projDir <- "/Volumes/C/projects/Flagler/airsage"
setwd(projDir)
csvFiles <- dir(projDir, pattern = ".csv")
for (c in 1:length(csvFiles)){
data <- read.csv(csvFiles[c])
nrows <- nrow(data)
ntrips <- sum(data$Count)
samples <- cbind(csvFiles[c], nrows, ntrips)
ifelse (c ==1 , all_samples <- samples, all_samples <- rbind(all_samples, samples))
ifelse (c ==1 , count <- nrows, count <- count + nrows)
ifelse (c ==1 , trips <- ntrips, trips <- trips + ntrips)
}
all <- data.frame(all_samples, stringsAsFactors = FALSE)
all <- rbind(all, c("Total",count, trips))
all <- all %>% mutate(trip_per_sample = 100 * as.numeric(ntrips) / as.numeric(nrows))
all <- all %>% mutate(pct_samples = 100 * as.numeric(nrows) / count)
all <- all %>% mutate(pct_trips = 100 * as.numeric(ntrips) / trips)
names(all) <- c("File", "Samples", "Trips","Trips/Samples" ,"% Sample", "% Trips")
print(kable(all))
data_wddp <- read.csv("trip_leg_matrix_cusWDDP.csv")
data_wdh <- read.csv("trip_leg_matrix_cusWDH.csv")
data_wddp$tod <- "peak"
data_wdh$tod <- "24H"
data <- rbind(data_wddp, data_wdh)
print(head(data))
samples <- data %>% group_by(tod) %>% summarize(sum = sum(Count))
samples <- data.frame(samples)
kable(samples)
trips_by_type    <- data_wdh %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_purpose <- data_wdh %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_OD      <- data_wdh %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type    <- trips_by_type %>%  mutate(percent = 100 * trips/sum$total)
trips_by_purpose <- trips_by_purpose %>% mutate(percent = 100 * trips/sum(sum$total))
# Print summary
kable(trips_by_type)
kable(trips_by_purpose)
# District to district flows (limit this to Flagler districts)
trips_by_OD <- trips_by_OD[,2:41]
trips_by_OD[is.na(trips_by_OD)] <- 0
m <- as.matrix(trips_by_OD)
dist <- c(1:40)
dimnames(m) <- list(Origins = dist,Destinations = dist)
groupColors <- colors()[dist]
chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
print(tbl_df(read.csv("")))
print(tbl_df(read.csv("trip_leg_submatrix_cusWDH.csv")))
trips_by_type    <- data_wddp %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_purpose <- data_wddp %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_period  <- data_wddp %>% group_by(Time_of_Day) %>%
summarise(trips = sum(Count)) %>% arrange(Time_of_Day)
trips_by_OD      <- data_wddp %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type    <- trips_by_type %>%  mutate(percent = 100 * trips/sum$total)
trips_by_purpose <- trips_by_purpose %>% mutate(percent = 100 * trips/sum(sum$total))
trips_by_period  <- trips_by_period %>% mutate(percent = 100 * trips/sum(sum$total))
# Print summary
kable(trips_by_type)
kable(trips_by_purpose)
kable(trips_by_period)
# District to district flows (limit this to Flagler districts)
trips_by_OD <- trips_by_OD[,2:41]
trips_by_OD[is.na(trips_by_OD)] <- 0
m <- as.matrix(trips_by_OD)
dist <- c(1:40)
dimnames(m) <- list(Origins = dist,Destinations = dist)
groupColors <- colors()[dist]
chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
sub_wddp <- read.csv("trip_leg_submatrix_cusWDDP.csv")
trips_by_type    <- sub_wddp %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_purpose <- sub_wddp %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_period  <- sub_wddp %>% group_by(Time_of_Day) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Time_of_Day)
trips_by_OD      <- sub_wddp %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
ee_sum <- trips_by_type %>% summarise(total = sum(ee))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type <- trips_by_type %>%  mutate(pct_trips = 100 * trips/sum$total,
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_purpose <- trips_by_purpose %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_period <- trips_by_period %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
# Print summary
kable(trips_by_type)
kable(trips_by_purpose)
kable(trips_by_period)
# Add project shape files
shape <- readOGR("airsarge_districts/TAZs.shp", layer = "TAZs", verbose = FALSE)
# Read District equivqlency file
taz_dist <- read.table("airsarge_districts/Renumber2.txt", sep = "\t", col.names = c("Dist", "TAZ","pct"))
# Compute centroids
shape_polySet <- SpatialPolygons2PolySet(shape)
# Calculate the centroids
centroids <- calcCentroid(shape_polySet, rollup=1)
shape@data <- cbind(shape@data, centroids)   # Assume internal order matching
# Add  color pallets
pal_hh <- colorNumeric(
palette = "Blues",
domain = shape$HHDEN
)
pal_pop <- colorNumeric(
palette = "Reds",
domain = shape$POPDEN
)
pal_work <- colorNumeric(
palette = "Blues",
domain = shape$WORKDEN
)
pal_emp <- colorNumeric(
palette = "Reds",
domain = shape$EMPDEN
)
pal_fact <- colorFactor(topo.colors(6), shape$PlnArea)
m <- leaflet() %>%
# Base Map
addProviderTiles("Stamen.Toner",group = "Stamen") %>%
addTiles(group = "OSM") %>%
setView(lng = -80.1918, lat = 25.7617, zoom = 10) %>%
# add district shape files
addTiles %>%
addPolygons(
data = shape, group = "Districts", smoothFactor = 0.5,
stroke = TRUE,  weight = 3, color = "grey",opacity = 0.5,
fill = TRUE, fillOpacity = 0.5,
fillColor = ~pal_fact(PlnArea),
popup = ~paste(sep = "<br/>",
htmlEscape(paste("District = ",as.character(PlnArea),sep="")),
htmlEscape(paste("TAZ = ",as.character(TAZ),sep="")),
htmlEscape(paste("AREA = ",as.character(SQMILE), sep="")),
htmlEscape(paste("Population =", as.character(TOTPOP), sep="")),
htmlEscape(paste("Households =", as.character(TOTHH), sep="")),
htmlEscape(paste("Workers =", as.character(TOTWORK), sep="")),
htmlEscape(paste("Pop density =", as.character(POPDEN), sep="")),
htmlEscape(paste("HH density =", as.character(HHDEN), sep="")),
htmlEscape(paste("Work density =", as.character(WORKDEN), sep=""))
)
) %>%
# Add district names
addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, weight = 1, label = ~as.character(shape$PID), radius = 1, labelOptions = labelOptions(noHide = T))
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyr)
library(dplyr)
library(knitr)
library(leaflet)
library(rgdal)
library(htmltools)
library(readr)
library(chorddiag)
# Used for computing district centroids
library(maptools)    # SpatialPolygons2PolySet
library(PBSmapping)  # calcCentroid
library(geosphere)
# User inputs
projDir <- "/Volumes/C/projects/Flagler/airsage"
setwd(projDir)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyr)
library(dplyr)
library(knitr)
library(leaflet)
library(rgdal)
library(htmltools)
library(readr)
library(chorddiag)
# Used for computing district centroids
library(maptools)    # SpatialPolygons2PolySet
library(PBSmapping)  # calcCentroid
library(geosphere)
# User inputs
projDir <- "/Volumes/C/projects/Flagler/airsage"
setwd(projDir)
# Chunk 2: read data
csvFiles <- dir(projDir, pattern = ".csv")
for (c in 1:length(csvFiles)){
data <- read.csv(csvFiles[c])
nrows <- nrow(data)
ntrips <- sum(data$Count)
samples <- cbind(csvFiles[c], nrows, ntrips)
ifelse (c ==1 , all_samples <- samples, all_samples <- rbind(all_samples, samples))
ifelse (c ==1 , count <- nrows, count <- count + nrows)
ifelse (c ==1 , trips <- ntrips, trips <- trips + ntrips)
}
all <- data.frame(all_samples, stringsAsFactors = FALSE)
all <- rbind(all, c("Total",count, trips))
all <- all %>% mutate(trip_per_sample = 100 * as.numeric(ntrips) / as.numeric(nrows))
all <- all %>% mutate(pct_samples = 100 * as.numeric(nrows) / count)
all <- all %>% mutate(pct_trips = 100 * as.numeric(ntrips) / trips)
names(all) <- c("File", "Samples", "Trips","Trips/Samples" ,"% Sample", "% Trips")
print(kable(all))
# Chunk 3: trips
data_wddp <- read.csv("trip_leg_matrix_cusWDDP.csv")
data_wdh <- read.csv("trip_leg_matrix_cusWDH.csv")
data_wddp$tod <- "peak"
data_wdh$tod <- "24H"
data <- rbind(data_wddp, data_wdh)
print(head(data))
samples <- data %>% group_by(tod) %>% summarize(sum = sum(Count))
samples <- data.frame(samples)
kable(samples)
# Chunk 4: daily trips
trips_by_type    <- data_wdh %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_purpose <- data_wdh %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_OD      <- data_wdh %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type    <- trips_by_type %>%  mutate(percent = 100 * trips/sum$total)
trips_by_purpose <- trips_by_purpose %>% mutate(percent = 100 * trips/sum(sum$total))
# Print summary
kable(trips_by_type)
kable(trips_by_purpose)
# District to district flows (limit this to Flagler districts)
trips_by_OD <- trips_by_OD[,2:41]
trips_by_OD[is.na(trips_by_OD)] <- 0
m <- as.matrix(trips_by_OD)
dist <- c(1:40)
dimnames(m) <- list(Origins = dist,Destinations = dist)
groupColors <- colors()[dist]
chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
print(tbl_df(read.csv("")))
print(tbl_df(read.csv("trip_leg_submatrix_cusWDH.csv")))
# Chunk 5
trips_by_type    <- data_wddp %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_purpose <- data_wddp %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)
trips_by_period  <- data_wddp %>% group_by(Time_of_Day) %>%
summarise(trips = sum(Count)) %>% arrange(Time_of_Day)
trips_by_OD      <- data_wddp %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type    <- trips_by_type %>%  mutate(percent = 100 * trips/sum$total)
trips_by_purpose <- trips_by_purpose %>% mutate(percent = 100 * trips/sum(sum$total))
trips_by_period  <- trips_by_period %>% mutate(percent = 100 * trips/sum(sum$total))
# Print summary
kable(trips_by_type)
kable(trips_by_purpose)
kable(trips_by_period)
# District to district flows (limit this to Flagler districts)
trips_by_OD <- trips_by_OD[,2:41]
trips_by_OD[is.na(trips_by_OD)] <- 0
m <- as.matrix(trips_by_OD)
dist <- c(1:40)
dimnames(m) <- list(Origins = dist,Destinations = dist)
groupColors <- colors()[dist]
chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
# Chunk 6
sub_wddp <- read.csv("trip_leg_submatrix_cusWDDP.csv")
trips_by_type    <- sub_wddp %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_purpose <- sub_wddp %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_period  <- sub_wddp %>% group_by(Time_of_Day) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Time_of_Day)
trips_by_OD      <- sub_wddp %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
ee_sum <- trips_by_type %>% summarise(total = sum(ee))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type <- trips_by_type %>%  mutate(pct_trips = 100 * trips/sum$total,
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_purpose <- trips_by_purpose %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_period <- trips_by_period %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
# Print summary
kable(trips_by_type)
kable(trips_by_purpose)
kable(trips_by_period)
# Chunk 7
# Add project shape files
shape <- readOGR("airsarge_districts/TAZs.shp", layer = "TAZs", verbose = FALSE)
# Read District equivqlency file
taz_dist <- read.table("airsarge_districts/Renumber2.txt", sep = "\t", col.names = c("Dist", "TAZ","pct"))
# Compute centroids
shape_polySet <- SpatialPolygons2PolySet(shape)
# Calculate the centroids
centroids <- calcCentroid(shape_polySet, rollup=1)
shape@data <- cbind(shape@data, centroids)   # Assume internal order matching
# Chunk 8
# Add  color pallets
pal_hh <- colorNumeric(
palette = "Blues",
domain = shape$HHDEN
)
pal_pop <- colorNumeric(
palette = "Reds",
domain = shape$POPDEN
)
pal_work <- colorNumeric(
palette = "Blues",
domain = shape$WORKDEN
)
pal_emp <- colorNumeric(
palette = "Reds",
domain = shape$EMPDEN
)
pal_fact <- colorFactor(topo.colors(6), shape$PlnArea)
m <- leaflet() %>%
# Base Map
addProviderTiles("Stamen.Toner",group = "Stamen") %>%
addTiles(group = "OSM") %>%
setView(lng = -80.1918, lat = 25.7617, zoom = 10) %>%
# add district shape files
addTiles %>%
addPolygons(
data = shape, group = "Districts", smoothFactor = 0.5,
stroke = TRUE,  weight = 3, color = "grey",opacity = 0.5,
fill = TRUE, fillOpacity = 0.5,
fillColor = ~pal_fact(PlnArea),
popup = ~paste(sep = "<br/>",
htmlEscape(paste("District = ",as.character(PlnArea),sep="")),
htmlEscape(paste("TAZ = ",as.character(TAZ),sep="")),
htmlEscape(paste("AREA = ",as.character(SQMILE), sep="")),
htmlEscape(paste("Population =", as.character(TOTPOP), sep="")),
htmlEscape(paste("Households =", as.character(TOTHH), sep="")),
htmlEscape(paste("Workers =", as.character(TOTWORK), sep="")),
htmlEscape(paste("Pop density =", as.character(POPDEN), sep="")),
htmlEscape(paste("HH density =", as.character(HHDEN), sep="")),
htmlEscape(paste("Work density =", as.character(WORKDEN), sep=""))
)
) %>%
# Add district names
addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, weight = 1, label = ~as.character(shape$PID), radius = 1, labelOptions = labelOptions(noHide = T))
# Chunk 9
map_hhPop <- m %>%
addPolygons(
data = shape, group = "HH Density", smoothFactor = 0.5,
stroke = TRUE,  weight = 3, color = "grey",opacity = 0.5,
fill = TRUE, fillOpacity = 0.5,
fillColor = ~pal_hh(HHDEN)
)  %>%
addPolygons(
data = shape, group = "Pop Density",smoothFactor = 0.5,
stroke = TRUE,  weight = 3, color = "grey",opacity = 0.5,
fill = TRUE, fillOpacity = 0.5,
fillColor = ~pal_pop(POPDEN)
)  %>%
addLegend(
"bottomright",pal = pal_hh, values = shape$HHDEN,
title = "HH Density"
) %>%
addLegend(
"bottomleft",pal = pal_pop, values = shape$POPDEN,
title = "Pop Density", layerId = 1
) %>%
addLayersControl(
baseGroups = c("OSM","Stamen"),
overlayGroups = c("Districts", "HH Density", "Pop Density"),
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup(c( "HH Density","Pop Density"))
map_hhPop
# Chunk 10
map_workEmp <- m %>%
addPolygons(
data = shape, group = "Emp Density",smoothFactor = 0.5,
stroke = TRUE,  weight = 3, color = "grey",opacity = 0.5,
fill = TRUE, fillOpacity = 0.5,
fillColor = ~pal_emp(EMPDEN)
)  %>%
addPolygons(
data = shape, group = "Work Density",smoothFactor = 0.5,
stroke = TRUE,  weight = 3, color = "grey",opacity = 0.5,
fill = TRUE, fillOpacity = 0.5,
fillColor = ~pal_work(WORKDEN)
) %>%
addLegend(
"bottomleft",pal = pal_emp, values = shape$EMPDEN,
title = "Emp Density", layerId = 2
) %>%
addLegend(
"bottomright",pal = pal_work, values = shape$WORKDEN,
title = "Work Density"
) %>%
addLayersControl(
baseGroups = c("OSM","Stamen"),
overlayGroups = c("Districts", "Work Density", "Emp Density"),
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup(c("Work Density", "Emp Density"))
map_workEmp
# Chunk 11
data_wddp <- read.csv("trip_leg_matrix_cusWDDP.csv")
sub_wdh <- read.csv("trip_leg_submatrix_cusWDH.csv")
trips_by_type    <- sub_wdh %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_purpose <- sub_wdh %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_period  <- sub_wdh %>% group_by(Time_of_Day) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Time_of_Day)
trips_by_OD      <- sub_wdh %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
ee_sum <- trips_by_type %>% summarise(total = sum(ee))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type <- trips_by_type %>%  mutate(pct_trips = 100 * trips/sum$total,
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_purpose <- trips_by_purpose %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_period <- trips_by_period %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
kable(trips_by_type)
kable(trips_by_purpose)
kable(trips_by_period)
head(sub_wdh)
sub_wdh <- read.csv("trip_leg_submatrix_cusWDH.csv")
# fix colnames for purpose and time_of_day
sub_wdh <- sub_wdh %>% rename(Purpose = Time_of_Day, Time_of_Day = Purpose)
head(sub_wdh)
trips_by_type    <- sub_wdh %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_purpose <- sub_wdh %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_period  <- sub_wdh %>% group_by(Time_of_Day) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Time_of_Day)
trips_by_OD      <- sub_wdh %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
sub_wdh <- read.csv("trip_leg_submatrix_cusWDH.csv")
# fix colnames for purpose and time_of_day
sub_wdh <- sub_wdh %>% rename(Purpose = Time_of_Day, Time_of_Day = Purpose)
trips_by_type    <- sub_wdh %>% group_by(Subscriber_Class) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_purpose <- sub_wdh %>% group_by(Subscriber_Class, Purpose) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)
trips_by_period  <- sub_wdh %>% group_by(Time_of_Day) %>%
summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Time_of_Day)
trips_by_OD      <- sub_wdh %>% group_by(Origin_Zone, Destination_Zone) %>%
summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)
# Total trips
sum <- trips_by_type %>% summarise(total = sum(trips))
ee_sum <- trips_by_type %>% summarise(total = sum(ee))
print(paste("Total trips = ", as.character(sum), sep =""))
# Compute percentage
trips_by_type <- trips_by_type %>%  mutate(pct_trips = 100 * trips/sum$total,
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_purpose <- trips_by_purpose %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
trips_by_period <- trips_by_period %>% mutate(pct_trips = 100 * trips/sum(sum$total),
pct_ee = 100 * ee/ee_sum$total,
ee_share = 100 * ee/trips)
# Print summary
kable(trips_by_type)
kable(trips_by_purpose)
kable(trips_by_period)
getwd()
