{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Flagler Data Review\"\nauthor: \"Amar Sarvepalli\"\ndate: \"September 27, 2016\"\noutput:\n  html_document:\n    fig_caption: yes\n    fig_width: 9\n    keep_md: yes\n    number_sections: yes\n    toc: yes\n  word_document:\n    toc: yes\n---\n\n## Introduction\nThis document provides an indepth analysis of exisiting conditions of the Flagler Corridor. The analysis is divided into following sections:\n\n1) Airsage Data Samples\n2) Review of Airsage Data\n3) AirSage OD Flows\n4) Review of ACS / CTPP JTW Flows\n5) Review of APC data for Flagler\n6) Census socio-economic data (2015)\n\n\n\n```{r user settings, echo=TRUE}\nknitr::opts_chunk$set(echo = TRUE, fig.width = 9.5, cache=TRUE)\n# User inputs:\nprojDir         <- \"/Users/amarsarvepalli/Desktop/github/Flagler\"\n\n# Airsage data files\nairsage_data    <- c(\"airsage/trip_leg_matrix_cusWDH.csv\",\n                     \"airsage/trip_leg_matrix_cusWDDP.csv\",\n                     \"airsage/trip_leg_submatrix_cusWDDP.csv\",\n                     \"airsage/trip_leg_submatrix_cusWDH.csv\")\nairsage_shapeFile <- \"airsage/airsarge_districts/TAZs.shp\"\nairsage_Districts <- \"airsage/airsarge_districts/district_equivalency.csv\"\n\n# Define corridor districts\nStudy_districts <- c(20:40)\nsegments_1 <- c(35:40)\nSegments_2 <- c(30:34)\nSegments_3 <- c(22:23,26:29)\nSegments_4 <- c(19:21)\n  \n# Gtfs network\ngtfsShapesFile <- \"GTFS/miami-dade-transit_20150626_0146/shapes.txt\"\ngtfsTripsFile <- \"GTFS/miami-dade-transit_20150626_0146/trips.txt\"\ngtfsRoutesFile <- \"GTFS/miami-dade-transit_20150626_0146/routes.txt\"\nrouteName <- \"flagler\"\n\n# Census ACS and CTPP data files\n# ctpp_flowFile <- \"acs_data/MiamiDade_CTPP_A302103.csv\"\nctpp_zipFile <- \"acs_data/MiamiDade_CTPP_A302103.zip\"\nacs_shapeFile     <- \"acs_data/Miami_Dade_Census_Tracts.shp\"\nacs_airsage_dist <- \"acs_data/tract_district_eqiv.csv\"\nacs_demoFile <- \"acs_data/selected_acs_data.csv\"\n\n# APC data\napc_dir <- \"bus_apc_data/Flagler St BRTStudy APC Data Oct 2015_Xlsx\"\napc_tag_districts <- \"bus_apc_data/Flagler St BRTStudy APC Data Oct 2015_Xlsx/apc_data_gecoded_districts.csv\"\n  \n# Output files\ndaily_od_matrix <- \"daily_od_trips_by_airsage_districts.csv\"\npeak_od_matrix <- \"peak_od_trips_by_airsage_districts.csv\"\ndaily_od_submatrix <- \"daily_od_sub_trips_by_airsage_districts.csv\"\npeak_od_submatrix <- \"peak_od_sub_trips_by_airsage_districts.csv\"\njtw_trn_matrix <- \"JTW_trn_trips_by_airsage_districts.csv\"\napc_trn_boardings <- \"apc_trn_boardings.csv\"\n```\n\n```{r setup, include=FALSE, cache=TRUE}\n# load libraries\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(leaflet)\nlibrary(rgdal)\nlibrary(htmltools)\nlibrary(readr)\nlibrary(readxl)\nlibrary(chorddiag)   # d3 chord plot\nlibrary(maptools)    # SpatialPolygons2PolySet\nlibrary(PBSmapping)  # calcCentroid\nlibrary(geosphere)   # desire lines\n\n```\n\n\n\n```{r custom functions, echo = FALSE}\n\n# function to compute row / column sums\nadd_marginals <- function(df) {\n  df2 <- as.data.frame(df)\n  \n  cnames <- c(colnames(df), \"total\")\n  rnames <- c(row.names(df),\"total\")\n  \n  df2 <- rbind(df2, colSums(df2))  \n  df2 <- cbind(df2, rowSums(df2))\n\n  row.names(df2) <- rnames\n  colnames(df2) <- cnames\n  return(df2) \n}\n\n# function to remove \"total\" from the matrix\nremove_marginals <- function(df){\n  df2 <- df %>% select(-total) %>% filter(names(df) != \"total\")\n  return(df2)\n}\n\n\n```\n\n\n\n## 1. AirSage Data Samples\n#### 1.1 Airsage Data File Description\nThis is airsage data review. The following is the description of the data files\n\n1) **trip_leg_matrix_cusWDH.csv**  and **trip_leg_matrix_cusWDDP.csv**: reporting  trips between study area zones for average weekday 24 hour period and specific AM and PM day parts respectively.\n\n2) **trip_leg_submatrix_cusWDH.csv**  and **trip_leg_submatrix_cusWDDP.csv**: reporting trips between study area zones that passed through the sub matrix analysis zone (in the SZCount column) for average weekday 24 hour period and specific AM and PM day parts respectively. \n\nThe following are the list of files received from Airsage along with:\n1) number of samples\n2) number of trips\n3) ratio of trips to samples\n4) percent of samples\n5) percent of trips\n\n\n```{r read data, echo=FALSE, message=FALSE, warning=FALSE}\n  \ncsvFiles <- dir(paste0(\"airsage/\",sep=\"\"), pattern = \".csv\")\n\n  for (c in 1:length(csvFiles)){\n    data <- read.csv(paste0(\"airsage/\",csvFiles[c]))\n    nrows <- nrow(data)\n    ntrips <- sum(data$Count)\n    samples <- cbind(csvFiles[c], nrows, ntrips)\n    ifelse (c ==1 , all_samples <- samples, all_samples <- rbind(all_samples, samples))\n    ifelse (c ==1 , count <- nrows, count <- count + nrows)\n    ifelse (c ==1 , trips <- ntrips, trips <- trips + ntrips)\n  }\n\n    all <- data.frame(all_samples, stringsAsFactors = FALSE)\n    all <- rbind(all, c(\"Total\",count, trips))\n    all <- all %>% mutate(trip_per_sample = 100 * as.numeric(ntrips) / as.numeric(nrows))\n    all <- all %>% mutate(pct_samples = 100 * as.numeric(nrows) / count)\n    all <- all %>% mutate(pct_trips = 100 * as.numeric(ntrips) / trips)\n    names(all) <- c(\"File\", \"Samples\", \"Trips\",\"Trips/Samples\" ,\"% Sample\", \"% Trips\")\n    print(kable(all,format.args = list(big.mark = \",\"), digits = 0))\n  \n```\n\nPeak data flow shows a total observations of 9,666 whereas total daily flows are only 6,052.\nDoes this mean the daily samples are only for offpeak? \n46% of the daily flow are represented from 24% sample?\n\n\n#### 1.2 Contents of \"trip_leg_matrix_cusWDDP.csv\" and Contents of \"trip_leg_matrix_cusWDDP.csv\"\nThis file contains 9,666 observations and 9 fields. Each sample was geocoded with an _Origin_Zone_ and _Destination_Zone_ pairs and _Count_ represents the total flows between these OD pairs. The start and end dates define the data collection period, which is April, 2015. The other fields: _Subscriber_Class_, _Purpose_ and _Time_of_Day_ describe the trip attributes.\n\n```{r daily & peak trips, echo=TRUE, message=FALSE, warning=FALSE}\n  data_wddp <- read.csv(\"airsage/trip_leg_matrix_cusWDDP.csv\")\n  data_wdh <- read.csv(\"airsage/trip_leg_matrix_cusWDH.csv\")\n  data_wddp$tod <- \"peak\"\n  data_wdh$tod <- \"24H\"\n  data <- rbind(data_wddp, data_wdh)\n  print(head(data))\n```\n\nTotal trips from both files are shown below. \n```{r total trips, echo=TRUE, message=FALSE, warning=FALSE}\n    \n  # Total trips\n  total_trips <- data %>% group_by(tod) %>% summarize(sum = sum(Count))\n  kable(total_trips,format.args = list(big.mark = \",\"), digits = 0)\n```\n\nThe daily file contains more aggregated data with periods combined and thus the number of samples are fewer compared to AM/PM files. However, the total number of trips reveal that daily includes AM/PM trips although this needs to be confirmed from Airsage. \n\n```{r trips by purpose, echo=TRUE, message=FALSE, warning=FALSE}\n  # Break down by purpose and period\n  samples <- data %>% group_by(tod, Purpose, Time_of_Day) %>% tally\n  trips <- data %>% group_by(tod, Purpose, Time_of_Day) %>% summarize(sum = sum(Count))\n  kable(left_join(samples,trips, by = c(\"Purpose\" , \"Time_of_Day\", \"tod\")),\n        format.args = list(big.mark = \",\"), digits = 0)\n  \n```\n\n## 2. Review of AirSage Data\n#### 2.1 Contents of Daily file (_trip_leg_matrix_cusWDH.csv_)\n#### Trips by purpose and resident type (Subscriber_Class)\n* There are a total of 7,457,084 OD flows in 24H. \n* About 83% of these trips (6.2 Million daily flows) are made by resident population and the remaining 17% of trip are made by the visitors. \n* Most of the visitor trip purpose was Non-home based (NHB) as expected, however there are few handful of trips that are coded as Home-based other (HBO) trips (0.03%). These trips can be recoded into NHB as it makes less sense to assume a \"home end\" for visitors.\n* Of 6.2 Million resident trips, 17% are Home-based work (HBW), 29% are NHB and 36% are HBO trips. The work share of trips is in acceptable range for HBW trips (typically ~20%).\n\n\n```{r daily trips, echo=FALSE, message=FALSE, warning=FALSE}\n\n  trips_by_type    <- data_wdh %>% group_by(Subscriber_Class) %>% \n                      summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)\n  trips_by_purpose <- data_wdh %>% group_by(Subscriber_Class, Purpose) %>% \n                      summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)\n  trips_by_OD      <- data_wdh %>% group_by(Origin_Zone, Destination_Zone) %>% \n                      summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)\n\n  # Total trips  \n  sum <- trips_by_type %>% summarise(total = sum(trips))\n  print(paste(\"Total trips = \", as.character(sum), sep =\"\"))\n  \n  # Compute percentage\n  trips_by_type    <- trips_by_type %>%  mutate(percent = 100 * trips/sum$total)\n  trips_by_purpose <- trips_by_purpose %>% mutate(percent = 100 * trips/sum(sum$total))\n  \n  # Print summary\n  kable(trips_by_type,format.args = list(big.mark = \",\"), digits = 0)\n  kable(trips_by_purpose,format.args = list(big.mark = \",\"), digits = 0)\n  \n  # District to district flows (limit this to Flagler districts)\n  trips_by_OD <- trips_by_OD[,2:41]\n  trips_by_OD[is.na(trips_by_OD)] <- 0\n  \n  # Write output\n  write.csv(trips_by_OD, daily_od_matrix, row.names = FALSE)\n  \n```\n\n#### 2.2 Contents of Peak period files (_trip_leg_matrix_cusWDDP.csv_)\n#### Trips by purpose, resident type (Subscriber_Class) and time of day\n* There are a total of 2,945,178 OD flows in the peak two periods. \n* About 85% of these trips (2.5 Million flows) are made by resident population and the remaining 15% of trip are made by the visitors. \n* Most of the visitor trip purpose was Non-home based (NHB) as expected, however there are few handful of trips that are coded as Home-based other (HBO) trips (0.02%). These trips can be recoded into NHB as it makes less sense to assume a \"home end\" for visitors.\n* Of 2.5 Million resident trips, 21% are Home-based work (HBW), 29% are NHB and 34% are HBO trips. The non-work share of trips seems too high given this file contains data only for the 6 hour peak periods.\n* Trips by time of day shows almost equal split between AM and PM peak periods with slightly more trips in PM period.\n\n```{r peak trips, echo=FALSE}\n  trips_by_type    <- data_wddp %>% group_by(Subscriber_Class) %>% \n                      summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)\n\n  trips_by_purpose <- data_wddp %>% group_by(Subscriber_Class, Purpose) %>% \n                      summarise(trips = sum(Count)) %>% arrange(Subscriber_Class)\n  \n  trips_by_period  <- data_wddp %>% group_by(Time_of_Day) %>% \n                      summarise(trips = sum(Count)) %>% arrange(Time_of_Day)\n  \n  trips_by_OD      <- data_wddp %>% group_by(Origin_Zone, Destination_Zone) %>% \n                      summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)\n\n  # Total trips\n  sum <- trips_by_type %>% summarise(total = sum(trips))\n  print(paste(\"Total trips = \", as.character(sum), sep =\"\"))\n  \n  # Compute percentage\n  trips_by_type    <- trips_by_type %>%  mutate(percent = 100 * trips/sum$total)\n  trips_by_purpose <- trips_by_purpose %>% mutate(percent = 100 * trips/sum(sum$total))\n  trips_by_period  <- trips_by_period %>% mutate(percent = 100 * trips/sum(sum$total))\n  \n  # Print summary\n  kable(trips_by_type,format.args = list(big.mark = \",\"), digits = 0)\n  kable(trips_by_purpose,format.args = list(big.mark = \",\"), digits = 0)\n  kable(trips_by_period,format.args = list(big.mark = \",\"), digits = 0)\n  \n  write.csv(trips_by_OD, peak_od_matrix, row.names = FALSE)\n  \n```\n\n#### 2.3 Airsage districts\nThe airsage data was provided for about 40 districts as shown in the below interactive map. \n\n```{r  airsage shapes, echo=TRUE}\n\n# Add airsage district file\nshape <- readOGR(airsage_shapeFile, layer = \"TAZs\", verbose = FALSE)\n\n# Read District equivqlency file\ntaz_dist <- read.csv(airsage_Districts)\n\n# Append districts to 40 Zones\nshape@data <- left_join(shape@data, taz_dist, by = \"TAZ\")\n\n```\n\n\n```{r district locations, echo=FALSE}\n# Compute centroids\nshape_polySet <- SpatialPolygons2PolySet(shape)\n\n# Calculate the centroids \ncentroids <- calcCentroid(shape_polySet, rollup=1)\nshape@data <- cbind(shape@data, centroids)   # Assume internal order matching\n\n# Create study area spatial data\nstudyShape <- subset(shape, Districts %in% Study_districts) \n\n# select colors based on Area Names\npal_fact <- colorFactor(topo.colors(6), shape$PlnArea)\n\nmap <- leaflet() %>%\n  \n  # Base Map\n  addProviderTiles(\"Stamen.Toner\",group = \"Stamen\") %>%\n  addTiles(group = \"OSM\") %>%\n  setView(lng = -80.1918, lat = 25.7617, zoom = 10) %>%\n  \n  # add district shape files\n  addTiles %>%\n    addPolygons(\n    data = shape, group = \"Dist Polyline\", smoothFactor = 0.5,\n    stroke = TRUE,  weight = 3, color = \"grey\",opacity = 0.5,\n    fill = FALSE) %>%\n  \n  # Color districts and create as a new layer\n  addPolygons(\n    data = shape, group = \"Districts\", smoothFactor = 0.5,\n    stroke = TRUE,  weight = 3, color = \"grey\",opacity = 0.5,\n    fill = TRUE, fillOpacity = 0.5,\n    fillColor = ~pal_fact(PlnArea)\n  ) %>%\n  \n  # Add Study area districts as a layer\n  addPolygons(\n    data = studyShape, group = \"Flagler Corridor\", smoothFactor = 0.5,\n    stroke = TRUE,  weight = 3, color = \"black\",opacity = 1.0,\n    fill = TRUE, fillOpacity = 0.75,\n    fillColor = \"black\"\n  ) %>%\n     \n  # Add district names\n  addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n                   weight = 1, label =   ~as.character(shape$Districts), \n                   radius = 1, labelOptions = labelOptions(noHide = T),  \n                   group = \"Districts Labels\") %>%\n  \n  # Add control \n  addLayersControl(\n        baseGroups = c(\"OSM\",\"Stamen\"),\n        overlayGroups = c(\"Districts\",\"Districts Labels\",\"Flagler Corridor\"),\n        options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(c(\"Districts Labels\"))\n\n\n```\n\n\n```{r add flagler routes, echo=FALSE}\n\n# Read GTFS files\ngtfsShapes <- read.csv(gtfsShapesFile)\ngtfsTrips <- read.csv(gtfsTripsFile)\ngtfsRoutes <- read.csv(gtfsRoutesFile)\n\n# Get Flagler shape point from above three files\nflaglerShape <- gtfsShapes %>%   \n                left_join(gtfsTrips, by = \"shape_id\") %>%\n                left_join(gtfsRoutes, by = \"route_id\") %>%\n                filter(grepl(routeName, route_long_name, ignore.case = TRUE)) %>%\n                select (route_id, shape_id, route_long_name, route_color, \n                        shape_pt_lat, shape_pt_lon, shape_pt_sequence, \n                        shape_dist_traveled) %>%\n                distinct()\n\n# Generate from and to data points from shape points\nflaglerShape <- flaglerShape %>% group_by(shape_id) %>% \n                rename(from_lat = shape_pt_lat, from_lon = shape_pt_lon) %>%\n                mutate(to_lat = lead(from_lat, 1),\n                       to_lon = lead(from_lon, 1)) %>%\n                ungroup() %>%\n                filter(!is.na(to_lat))\n\n total_shapes <- unique(flaglerShape$shape_id)\n factpal <- colorFactor(topo.colors(8), flaglerShape$shape_id)\n \n # Map data\n map <- map %>%\n   \n   # Base Map\n   addProviderTiles(\"Stamen.Toner\",group = \"Stamen\") %>%\n   addTiles(group = \"OSM\") %>%\n   setView(lng = -80.1918, lat = 25.7617, zoom = 10) %>%\n   addCircles(data = flaglerShape, lng = ~from_lon, lat = ~from_lat, \n               weight = 1, radius =100, color = ~factpal(shape_id),\n               popup = ~paste0(\"Route: \", route_long_name), group = \"Flagler Routes\"\n              ) %>%\n  \n   # Add control \n  addLayersControl(\n        baseGroups = c(\"OSM\",\"Stamen\"),\n        overlayGroups = c(\"Districts\",\"Districts Labels\",\"Flagler Corridor\", \"Flagler Routes\"),\n        options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(c(\"Districts Labels\"))\n             \n  map\n  \n```\n\n## 3. AirSage OD Flows\n#### Study Area Flows\nDistricts 20 - 40 represent Flagler Corridor study area.  The entire study area was defined as one super district \"StudyArea\" and the rest of the districts as \"Outside\" super district. The OD matrix generated for this super districts list the External-External (EE), Internal_External (IE), External_Internal (EI) and Internal-Internal (II) trips to the study area. The study area serves about 11% of the daily trips in the Miami-Dade county (sum of IE, EI and II trips). \n\n#### 3.1 Daily Study Area Flows\nTables below show the daily OD flows. In order to better understand the travel patterns through the corridor, OD tables are developed to & from the studyarea super district to all other districts, where district 20 is the aggregated study area district.\n\n\n```{r study_area_daily, echo=FALSE}\n  \n  # 1. Create Daily flagler matrix (II, EI/IE, EE through Flagler districts)\n  study_wdh <- data_wdh %>% mutate(\n                      study_Os = ifelse (Origin_Zone %in% Study_districts, \n                                         \"StudyArea\", \"Outside\"\n                                         ),\n                      study_Ds = ifelse (Destination_Zone %in% Study_districts, \n                                         \"StudyArea\", \"Outside\"\n                                         )\n                      )\n\n  trips_by_OD      <- study_wdh %>% group_by(study_Os, study_Ds) %>% \n                      summarise(trips = sum(Count)) %>% spread(study_Ds, trips) %>% \n                      as.data.frame() %>% select(-study_Os) %>% add_marginals()\n  \n  row.names(trips_by_OD) <- colnames(trips_by_OD)\n  pct_trips_by_OD <- 100 * trips_by_OD / trips_by_OD[\"total\",\"total\"]\n  \n  kable(trips_by_OD,format.args = list(big.mark = \",\"), digits = 0)\n  kable(pct_trips_by_OD,format.args = list(big.mark = \",\"), digits = 2)\n  \n  # 2. Create Daily flagler matrix to other districts  \n  study_wdh <- data_wdh %>% mutate(\n                      study_Os = ifelse (Origin_Zone %in% Study_districts, \n                                         min(Study_districts), Origin_Zone\n                                         ),\n                      study_Ds = ifelse (Destination_Zone %in% Study_districts, \n                                         min(Study_districts), Destination_Zone\n                                         )\n                      )\n  \n  trips_by_OD      <- study_wdh %>% group_by(study_Os, study_Ds) %>% \n                      summarise(trips = sum(Count)) %>% spread(study_Ds, trips) %>%\n                      as.data.frame() %>% select(-study_Os) %>% add_marginals()\n  # Write output\n  write.csv(trips_by_OD, daily_od_submatrix, row.names = FALSE)\n  \n  # Compute to & from Study Area flows (& pct flows)\n  study_origins <- trips_by_OD %>% filter(row.names(trips_by_OD) == \"20\")\n  study_origins_pct <- 100 * study_origins / study_origins$total\n  study_destination <- trips_by_OD %>% select(20) %>% t() %>% as.data.frame()\n  study_destination_pct <- 100 * study_destination / study_destination$total\n  studyarea_flows <- bind_rows(study_origins, \n                               study_origins_pct, \n                               study_destination, \n                               study_destination_pct\n                               ) %>% \n                     t() %>% as.data.frame\n  \n  colnames(studyarea_flows) <- c(\"Origins\", \"Origin_Pct\", \"Destination\", \"Dest_Pct\")\n  kable(studyarea_flows,format.args = list(big.mark = \",\"), digits = 2)\n  \n  # generate chord diagram  \n  # df <- remove_marginals(trips_by_OD)\n  # m <- as.matrix(df)\n  # dimnames(m) <- list(Origins = row.names(df), Destinations = row.names(df))\n  # groupColors <-colorRampPalette(c(\"blue\", \"red\", \"green\"))(20) \n  # chorddiag(m, groupColors = groupColors, groupnamePadding = 20, showTicks = FALSE)\n``` \n\nPlot of total daily Origins and Destinations to/from Study Area.\n\n```{r daily desire line, echo=FALSE}\n  # Plot desire lines for the daily trips\n  trips_by_OD <- trips_by_OD %>% \n                 remove_marginals() %>% \n                 gather() %>% \n                 mutate(To = rep(c(1:20),20)) %>% \n                 rename(From = key)\n\n  trips_by_OD$From <- as.integer(trips_by_OD$From)\n  \n  dist_cords <- shape@data %>% filter(Districts < 21) %>% select(Districts, X, Y)\n  \n  # From Study Area to all districts\n  from_Study <- trips_by_OD %>% \n                  left_join(dist_cords, by = c(\"From\" = \"Districts\")) %>%\n                  rename(fromlong = X, fromlat = Y) %>%\n                  left_join(dist_cords, by = c(\"To\" = \"Districts\")) %>%\n                  rename(tolong = X, tolat = Y) %>%\n                  filter(From == 20) \n  \n  # Generate desire lines\n  from_flows <- gcIntermediate(\n                  p1 = select(from_Study, fromlong:fromlat),\n                  p2 = select(from_Study, tolong:tolat),\n                  sp = TRUE,\n                  addStartEnd = TRUE\n                )\n  from_flows <- SpatialLinesDataFrame(from_flows, from_Study)\n\n  # From all districts to Study Area district\n  to_Study <- trips_by_OD %>% \n                  left_join(dist_cords, by = c(\"From\" = \"Districts\")) %>%\n                  rename(fromlong = X, fromlat = Y) %>%\n                  left_join(dist_cords, by = c(\"To\" = \"Districts\")) %>%\n                  rename(tolong = X, tolat = Y) %>%\n                  filter(To == 20) %>%\n                  mutate(pct = 100 * value/sum(value))\n  \n  # Generate desire lines \n  to_flows <- gcIntermediate(\n              p1 = select(to_Study, fromlong:fromlat),\n              p2 = select(to_Study, tolong:tolat),\n              sp = TRUE,\n              addStartEnd = TRUE\n            )\n  \n  to_flows <- SpatialLinesDataFrame(to_flows, to_Study)\n\n  # Map both origins and destination flows to/from study area\n  map %>%\n  addPolylines(\n    data = from_flows,\n    group = \"Origins\",\n    weight = ~ value/ 10000,\n    color = \"red\",\n    popup = ~paste0(\"Origins Trips: \", value)\n  ) %>%\n  addCircleMarkers(\n    data = from_flows, \n    lng = from_flows$tolong, lat = from_flows$tolat, weight = 1, \n    label = ~as.character(format(round(from_flows$value,0), big.mark = \",\")),\n    radius = 1,\n    labelOptions = labelOptions(noHide = T),\n    group = \"Origins\"\n  ) %>%\n  addPolylines(\n    data = to_flows,\n    group = \"Destinations\",\n    weight = ~ value/ 10000,\n    color = \"blue\",\n    popup = ~paste0(\"Destinations Trips: \", value)\n  ) %>%\n  addCircleMarkers(\n    data = to_flows, \n    lng = to_flows$fromlong, lat = to_flows$fromlat, weight = 1, \n    label =   ~as.character(format(round(to_flows$value,0), big.mark = \",\")), radius = 1, \n    labelOptions = labelOptions(noHide = T),  \n    group = \"Destinations\"\n  ) %>%\n  addLayersControl(\n        baseGroups = c(\"OSM\",\"Stamen\"),\n        overlayGroups = c(\"Districts\",\"Origins\", \"Destinations\", \"Districts Labels\",\"Flagler Corridor\"),\n        options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(c(\"Districts\", \"Destinations\", \"Districts Labels\"))\n\n```\n\n#### 3.2 Peak Study Area Flows\nThe following are the tables showing the peak trips. In order to better understand the travel patterns through the corridor, OD tables are developed to & from the studyarea super district to all other districts, where district 20 is the aggregated study area district.\n\n```{r study_area_peak, echo=FALSE}  \n  # 3. Create Peak flagler matrix (II, EI/IE, EE through Flagler districts)\n  study_wddp <- data_wddp %>% mutate(\n                      study_Os = ifelse (Origin_Zone %in% Study_districts, \"StudyArea\", \"Outside\"),\n                      study_Ds = ifelse (Destination_Zone %in% Study_districts, \"StudyArea\", \"Outside\")\n                      )\n  trips_by_OD      <- study_wddp %>% group_by(study_Os, study_Ds) %>% \n                      summarise(trips = sum(Count)) %>% spread(study_Ds, trips) %>% \n                      as.data.frame() %>% select(-study_Os) %>% add_marginals()\n  \n  row.names(trips_by_OD) <- colnames(trips_by_OD)\n  kable(trips_by_OD,format.args = list(big.mark = \",\"), digits = 0)\n  \n  pct_trips_by_OD <- 100 * trips_by_OD / trips_by_OD[\"total\",\"total\"]\n  kable(pct_trips_by_OD,format.args = list(big.mark = \",\"), digits = 2)\n  \n  # 4. Create Peak flagler matrix to other districts  \n  study_wddp <- data_wddp %>% mutate(\n                      study_Os = ifelse (Origin_Zone %in% Study_districts, \n                                         min(Study_districts), Origin_Zone\n                                         ),\n                      study_Ds = ifelse (Destination_Zone %in% Study_districts, \n                                         min(Study_districts), Destination_Zone\n                                         )\n                      )\n  \n  trips_by_OD      <- study_wddp %>% group_by(study_Os, study_Ds) %>% \n                      summarise(trips = sum(Count)) %>% spread(study_Ds, trips) %>%\n                      as.data.frame() %>% select(-study_Os) %>% add_marginals()\n  \n  row.names(trips_by_OD) <- colnames(trips_by_OD)\n  pct_trips_by_OD <- 100 * trips_by_OD / trips_by_OD[\"total\",\"total\"]\n  print(\"Percent of Peak Trips\")\n  # kable(pct_trips_by_OD,format.args = list(big.mark = \",\"), digits = 2)\n  \n  # Write output\n  write.csv(trips_by_OD, peak_od_submatrix, row.names = FALSE)\n  \n  # Compute to & from Study Area flows (& pct flows)\n  study_origins <- trips_by_OD %>% filter(row.names(trips_by_OD) == \"20\")\n  study_origins_pct <- 100 * study_origins / study_origins$total\n  study_destination <- trips_by_OD %>% select(20) %>% t() %>% as.data.frame()\n  study_destination_pct <- 100 * study_destination / study_destination$total\n  studyarea_flows <- bind_rows(study_origins, \n                               study_origins_pct, \n                               study_destination, \n                               study_destination_pct\n                               ) %>% \n                     t() %>% as.data.frame\n  colnames(studyarea_flows) <- c(\"Origins\", \"Origin_Pct\", \"Destination\", \"Dest_Pct\")\n  kable(studyarea_flows,format.args = list(big.mark = \",\"), digits = 2)\n  \n  # produce chord diagram  \n  # df <- remove_marginals(trips_by_OD)\n  # m <- as.matrix(df)\n  # dimnames(m) <- list(Origins = row.names(df), Destinations = row.names(df))\n  # groupColors <-  colorRampPalette(c(\"blue\", \"red\", \"green\"))(20) \n  # chorddiag(m, groupColors = groupColors, groupnamePadding = 20, showTicks = FALSE)\n  \n```\n\nPlot of total peak Origins and Destinations to/from Study Area.\n\n```{r peak desire lines, echo=FALSE}\n  # Plot desire lines for the peak trips\n  trips_by_OD <- trips_by_OD %>% \n                 remove_marginals() %>% \n                 gather() %>% \n                 mutate(To = rep(c(1:20),20)) %>% \n                 rename(From = key)\n\n  trips_by_OD$From <- as.integer(trips_by_OD$From)\n  \n  dist_cords <- shape@data %>% filter(Districts < 21) %>% select(Districts, X, Y)\n  \n  # From Study Area to all districts\n  from_Study <- trips_by_OD %>% \n                  left_join(dist_cords, by = c(\"From\" = \"Districts\")) %>%\n                  rename(fromlong = X, fromlat = Y) %>%\n                  left_join(dist_cords, by = c(\"To\" = \"Districts\")) %>%\n                  rename(tolong = X, tolat = Y) %>%\n                  filter(From == 20) \n  \n  # Generate desire lines\n  from_flows <- gcIntermediate(\n                  p1 = select(from_Study, fromlong:fromlat),\n                  p2 = select(from_Study, tolong:tolat),\n                  sp = TRUE,\n                  addStartEnd = TRUE\n                )\n  from_flows <- SpatialLinesDataFrame(from_flows, from_Study)\n\n  # From all districts to Study Area district\n  to_Study <- trips_by_OD %>% \n                  left_join(dist_cords, by = c(\"From\" = \"Districts\")) %>%\n                  rename(fromlong = X, fromlat = Y) %>%\n                  left_join(dist_cords, by = c(\"To\" = \"Districts\")) %>%\n                  rename(tolong = X, tolat = Y) %>%\n                  filter(To == 20) %>%\n                  mutate(pct = 100 * value/sum(value))\n  \n  # Generate desire lines \n  to_flows <- gcIntermediate(\n              p1 = select(to_Study, fromlong:fromlat),\n              p2 = select(to_Study, tolong:tolat),\n              sp = TRUE,\n              addStartEnd = TRUE\n            )\n  \n  to_flows <- SpatialLinesDataFrame(to_flows, to_Study)\n\n  # Map both origins and destination flows to/from study area\n  map %>%\n  addPolylines(\n    data = from_flows,\n    group = \"Origins\",\n    weight = ~ value/ 10000,\n    color = \"red\",\n    popup = ~paste0(\"Origins Trips: \", value)\n  ) %>%\n  addCircleMarkers(\n    data = from_flows, \n    lng = from_flows$tolong, lat = from_flows$tolat, weight = 1, \n    label = ~as.character(format(round(from_flows$value,0), big.mark = \",\")),\n    radius = 1,\n    labelOptions = labelOptions(noHide = T),\n    group = \"Origins\"\n  ) %>%\n  addPolylines(\n    data = to_flows,\n    group = \"Destinations\",\n    weight = ~ value/ 10000,\n    color = \"blue\",\n    popup = ~paste0(\"Destinations Trips: \", value)\n  ) %>%\n  addCircleMarkers(\n    data = to_flows, \n    lng = to_flows$fromlong, lat = to_flows$fromlat, weight = 1, \n    label =   ~as.character(format(round(to_flows$value,0), big.mark = \",\")), radius = 1, \n    labelOptions = labelOptions(noHide = T),  \n    group = \"Destinations\"\n  ) %>%\n  addLayersControl(\n        baseGroups = c(\"OSM\",\"Stamen\"),\n        overlayGroups = c(\"Districts\",\"Origins\", \"Destinations\", \"Districts Labels\",\"Flagler Corridor\"),\n        options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(c(\"Districts\", \"Destinations\", \"Districts Labels\"))\n\n```\n\n\n#### 3.3 Corridor Level Flows (Peak and Daily ODs)\n\\n Airsage daily and peak origin destinations at Corridor level\n\n```{r corridor airsage ods, echo=FALSE} \n    ods <- left_join(data_wddp %>% group_by(Origin_Zone) %>% summarise(O_wddp = sum(Count)),\n                     data_wdh %>% group_by(Origin_Zone) %>% summarise(O_wdh = sum(Count)),\n                     by = \"Origin_Zone\") %>% \n               left_join(data_wddp %>% group_by(Destination_Zone) %>% summarise(D_wddp = sum(Count)),\n                         by = c(\"Origin_Zone\" = \"Destination_Zone\")) %>% \n               left_join(data_wdh %>% group_by(Destination_Zone) %>% summarise(D_wdh = sum(Count)),\n                         by = c(\"Origin_Zone\" = \"Destination_Zone\"))\n               \n   ods <- rename(ods, Districts = Origin_Zone)\n   shape@data <- left_join(shape@data, ods, by = \"Districts\")\n        \nmap_Corridor_ODs <- map %>% \n  setView(lng = -80.27990, lat = 25.77110, zoom = 12) %>%\n # Daily Origins \n  addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n        weight = 1, \n        label =  ~as.character(format(round(shape$O_wdh,0), big.mark = \",\")),\n        radius = 1, labelOptions = labelOptions(noHide = T),  \n        group = \"Daily Origins\") %>%\n   # Daily Destinations \n   addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n        weight = 1, \n        label =  ~as.character(format(round(shape$D_wdh,0), big.mark = \",\")),\n        radius = 1, labelOptions = labelOptions(noHide = T),  \n        group = \"Daily Destinations\") %>% \n  # Peak Origins\n  addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n        weight = 1, \n        label =  ~as.character(format(round(shape$O_wddp,0), big.mark = \",\")),\n        radius = 1, labelOptions = labelOptions(noHide = T),  \n        group = \"Peak Origins\") %>%\n  # Peak Destinations\n  addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n        weight = 1, \n        label =  ~as.character(format(round(shape$D_wddp,0), big.mark = \",\")),\n        radius = 1, labelOptions = labelOptions(noHide = T),  \n        group = \"Peak Destinations\") %>% \n  addLayersControl(\n        baseGroups = c(\"OSM\"),\n        overlayGroups = c(\"Districts\", \n                          \"Daily Origins\", \"Daily Destinations\", \n                          \"Peak Origins\", \"Peak Destinations\"),\n        options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n\n  hideGroup(c(\"Daily Destinations\", \"Peak Origins\", \"Peak Destinations\"))\n\nmap_Corridor_ODs\n\n```\n\n#### 3.4 Contents of Peak subarea files (_trip_leg_submatrix_cusWDDP.csv_)\n#### Trips by purpose, resident type (Subscriber_Class) and time of day\n* There are a total of 1,472,307 OD flows in this file which represent EE flows through the region (Not sure I fully flow this file - Need some explanation from Airsage)\n* About 83% of these trips (1.2 Million flows) are made by resident population and the remaining 17% of trip are made by the visitors. \n* 10% of these trips are External-External through trips (ee). This is computed based on _SZCount_ field in the data.\n* The share of ee trips by purpose is consistent across all resident purposes and time of day.\n* Most of the visitor trip purpose was Non-home based (NHB) as expected.\n\n\n```{r sub_ee_peak, echo=FALSE}\n  sub_wddp <- read.csv(\"airsage/trip_leg_submatrix_cusWDDP.csv\")\n  trips_by_type    <- sub_wddp %>% group_by(Subscriber_Class) %>% \n                      summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)\n  \n  trips_by_purpose <- sub_wddp %>% group_by(Subscriber_Class, Purpose) %>% \n                      summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)\n  \n  trips_by_period  <- sub_wddp %>% group_by(Time_of_Day) %>% \n                      summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Time_of_Day)\n  \n  trips_by_OD      <- sub_wddp %>% group_by(Origin_Zone, Destination_Zone) %>% \n                      summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)\n\n  # Total trips\n  sum <- trips_by_type %>% summarise(total = sum(trips))\n  ee_sum <- trips_by_type %>% summarise(total = sum(ee))\n  print(paste(\"Total trips = \", as.character(sum), sep =\"\"))\n  \n  # Compute percentage\n  trips_by_type <- trips_by_type %>%  mutate(pct_trips = 100 * trips/sum$total, \n                                             pct_ee = 100 * ee/ee_sum$total, \n                                             ee_share = 100 * ee/trips)\n  \n  trips_by_purpose <- trips_by_purpose %>% mutate(pct_trips = 100 * trips/sum(sum$total), \n                                             pct_ee = 100 * ee/ee_sum$total, \n                                             ee_share = 100 * ee/trips)\n  \n  trips_by_period <- trips_by_period %>% mutate(pct_trips = 100 * trips/sum(sum$total), \n                                             pct_ee = 100 * ee/ee_sum$total, \n                                             ee_share = 100 * ee/trips)\n  \n  # Print summary\n  kable(trips_by_type)\n  kable(trips_by_purpose)\n  kable(trips_by_period)\n  \n```\n\n\n#### 3.4 Contents of Daily subarea files (_trip_leg_submatrix_cusWDH.csv_)\n#### Trips by purpose, and resident type (Subscriber_Class) \n* There are a total of 4,001,471 OD flows in this file which represent EE flows through the region (Not sure I fully flow this file - Need some explanation from Airsage)\n* About 80% of these trips (2.9 Million flows) are made by resident population and the remaining 20% of trip are made by the visitors. \n* About 9% of these trips are External-External through trips (ee). This is computed based on _SZCount_ field in the data.\n* The share of ee trips by purpose is consistent across all resident purposes and time of day.\n* Most of the visitor trip purpose was Non-home based (NHB) as expected.\n\n\n```{r sub_ee_daily, echo=FALSE}\n  sub_wdh <- read.csv(\"airsage/trip_leg_submatrix_cusWDH.csv\")\n\n  # fix colnames for purpose and time_of_day\n  sub_wdh <- sub_wdh %>% rename(Purpose = Time_of_Day, Time_of_Day = Purpose)\n\n  trips_by_type    <- sub_wdh %>% group_by(Subscriber_Class) %>% \n                      summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)\n  trips_by_purpose <- sub_wdh %>% group_by(Subscriber_Class, Purpose) %>% \n                      summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Subscriber_Class)\n  trips_by_period  <- sub_wdh %>% group_by(Time_of_Day) %>% \n                      summarise(trips = sum(Count), ee = sum(SZCount)) %>% arrange(Time_of_Day)\n  trips_by_OD      <- sub_wdh %>% group_by(Origin_Zone, Destination_Zone) %>% \n                      summarise(trips = sum(Count)) %>% spread(Destination_Zone, trips)\n\n  # Total trips\n  sum <- trips_by_type %>% summarise(total = sum(trips))\n  ee_sum <- trips_by_type %>% summarise(total = sum(ee))\n  print(paste(\"Total trips = \", as.character(sum), sep =\"\"))\n  \n  # Compute percentage\n  trips_by_type <- trips_by_type %>%  mutate(pct_trips = 100 * trips/sum$total, \n                                             pct_ee = 100 * ee/ee_sum$total, \n                                             ee_share = 100 * ee/trips)\n  \n  trips_by_purpose <- trips_by_purpose %>% mutate(pct_trips = 100 * trips/sum(sum$total), \n                                             pct_ee = 100 * ee/ee_sum$total, \n                                             ee_share = 100 * ee/trips)\n  \n  trips_by_period <- trips_by_period %>% mutate(pct_trips = 100 * trips/sum(sum$total), \n                                             pct_ee = 100 * ee/ee_sum$total, \n                                             ee_share = 100 * ee/trips)\n  \n  # Print summary\n  kable(trips_by_type)\n  kable(trips_by_purpose)\n  kable(trips_by_period)\n  \n```\n\n*** \n## 4. Review of ACS / CTPP JTW Flows\n\nThe journey to work (JTW) flow data from 5 year American Community Survey (ACS) 2006-2010 for Miami-Dade county was analyzed to understand the transit trip flows in the region. The tract to tract level data was obtained from ACS website and was processed to report out trips by mode and by districts (as defined in the above airsage data section). Also note that JTW is only for work purpose and is in person trip format which doesn't represent the entire regional trips.\n\nThe first table shows ACS CTPP trips by mode. There are about a million work related trips which are almost close to daily HBW trips reported in the airsage data. The breakup shows about 56,000 work related transit trips. The other category includes work from home, non-motorized modes.\n\n\n```{r CTPP data, echo=FALSE, message=FALSE, warning=FALSE}\n# Census ACS and CTPP data files\n# ctpp_flowFile <- \"acs_data/MiamiDade_CTPP_A302103.csv\"\n# ctpp_flows <- read_csv(ctpp_flowFile, skip = 2)\n# acs_shapeFile     <- \"acs_data/Tract_2014_Pop_Emp.shp\"\n# acs_airsage_dist <- \"acs_data/tract_district_eqiv.csv\"\n\n# Read airsage districts\nacs_airsage <- read_csv(acs_airsage_dist)\nacs_airsage <- acs_airsage %>% select(NAME, district_e) %>%\n               mutate(\"tract\" = as.character(NAME))\n\n# Read ctpp flow data directly from zip (zip file same as csv file)\nctpp_csvFile <- paste0(strsplit(strsplit(ctpp_zipFile,\"[.]\")[[1]],\"/\")[[1]][2],\".csv\")\nctpp_flows <- read_csv(unz(ctpp_zipFile, ctpp_csvFile), skip = 2)\ncolnames(ctpp_flows) <- gsub(\" \", \"\", colnames(ctpp_flows)) \n\n# Clean data\nctpp_flows <- ctpp_flows %>% \n              separate(RESIDENCE, c(\"geoTypeRes\",\"countyRes\"), sep = \",\", extra = \"drop\", remove = TRUE) %>%\n              separate(geoTypeRes, c(\"geo1\",\"geo2\", \"tractRes\"), sep = \" \", remove = TRUE) %>%\n              separate(WORKPLACE, c(\"geoTypeWrk\",\"countyWrk\"), sep = \",\", extra = \"drop\", remove = TRUE) %>%\n              separate(geoTypeWrk, c(\"geo3\",\"geo4\", \"tractWrk\"), sep = \" \", remove = TRUE) %>%            \n              select(-geo1, -geo2, -geo3, -geo4, -X6) %>%\n              filter(countyRes != \" Broward County\", Output == \"Estimate\")\n\n# Recode modes              \ntransit_modes <- c(\"Bus or trolley bus\", \"Subway or elevated\", \n                   \"Streetcar or trolley car\", \"Railroad\") \n\nauto_modes <-   c(\"Car, truck, or van -- Drove alone\",\n                   \"Car, truck, or van -- In a 2-person carpool\",\n                   \"Car, truck, or van -- In a 3-person carpool\",\n                   \"Car, truck, or van -- In a 4-person carpool\",\n                   \"Car, truck, or van -- In a 5-or-6-person carpool\",\n                   \"Car, truck, or van -- In a 7-or-more-person carpool\",\n                   \"Taxicab\")\n\nall_modes  <-   \"Total, means of transportation\"\n \nctpp_flows   <- ctpp_flows %>% \n                mutate (modes = ifelse (MeansofTransportation18 %in% transit_modes, \"transit\",\n                                   ifelse (MeansofTransportation18 %in% auto_modes, \"auto\",\n                                      ifelse (MeansofTransportation18 == all_modes, \"total\",\n                                        \"other\"\n                                         )\n                                      )\n                                   )\n                       ) %>%\n                rename(Trips = Workers16andOver)\n\n# Append district to ctpp flows (recode Miami-Beach tracts to district 10)\nctpp_flows <- ctpp_flows %>% \n              left_join(acs_airsage, by = c(\"tractRes\" = \"tract\")) %>% \n              rename(From = district_e) %>% \n              select(-NAME) %>%\n              left_join(acs_airsage, by = c(\"tractWrk\" = \"tract\")) %>% \n              rename(To = district_e) %>%\n              select(-NAME) %>%\n              mutate(from = ifelse(is.na(From), 10, From),\n                      to = ifelse(is.na(To), 10, To))\n\n# Summarize data \nsamples <-  ctpp_flows %>% group_by(MeansofTransportation18, modes) %>% tally()\ntrips   <-  ctpp_flows %>% group_by(MeansofTransportation18, modes) %>% summarize(trips = sum(Trips)) \n\ntrips_by_mode <- ctpp_flows %>% \n                 group_by(modes) %>%\n                 summarise(trips = sum(Trips)) %>%\n                 arrange(trips)\n\ntrips_by_OD <- ctpp_flows %>% \n               filter(modes == \"transit\") %>% \n               group_by(From, To) %>% \n               summarise(transit = sum(Trips)) %>% \n               spread(To, transit)\n\ntrips_by_OD[is.na(trips_by_OD)] <- 0\n  \n# Print summaries            \nkable(left_join(samples,trips, by = c(\"MeansofTransportation18\", \"modes\")), \n      format.args = list(big.mark = \",\"), digits = 2)\n            \nkable(trips_by_mode,format.args = list(big.mark = \",\"), digits = 2)\nwrite.csv(trips_by_OD, jtw_trn_matrix, row.names = FALSE)\n\n\n\n# # Get layer name from shape file\n# layerName <- strsplit(strsplit(acs_shapeFile,\"[.]\")[[1]],\"/\")[[1]][2]\n# \n# # Add census shape files\n# acsShape <- readOGR(paste0(projDir,\"/\",acs_shapeFile), layer = layerName, verbose = FALSE)\n# \n# map <- leaflet() %>%\n#   # Base Map\n#   addProviderTiles(\"Stamen.Toner\",group = \"Stamen\") %>%\n#   addTiles(group = \"OSM\") %>%\n#   setView(lng = -80.1918, lat = 25.7617, zoom = 10) %>%\n#   addTiles %>%\n#   addPolygons(data = acsShape, group = \"acs_data\")\n#     \n# map\n\n\n```\n\n\nPlot transit desire lines\n```{r Trn plots, echo=FALSE}\n\n  study_ctpp_flows <- ctpp_flows %>% mutate(\n                      study_Os = ifelse (From %in% Study_districts, \n                                         min(Study_districts), From\n                                         ),\n                      study_Ds = ifelse (To %in% Study_districts, \n                                         min(Study_districts), To\n                                         )\n                      )\n  \n  # Plot transit desire lines\n  trips_by_OD <- study_ctpp_flows %>% \n               filter(modes == \"transit\") %>% \n               group_by(study_Os, study_Ds) %>% \n               summarise(transit = sum(Trips)) %>%\n               select(study_Os, study_Ds, transit) %>%\n               filter(study_Os != 0, study_Ds != 0)\n\n  # dist_cords <- shape@data %>% filter(Districts < 21) %>% select(Districts, X, Y)\n  # dist_cords <- shape@data %>% select(Districts, X, Y)\n  # dist32 <- c(long = -80.27990 , lat = 25.77110)\n\n  from_Study <- trips_by_OD %>% \n                  left_join(dist_cords, by = c(\"study_Os\" = \"Districts\")) %>%\n                  rename(fromlong = X, fromlat = Y) %>%\n                  left_join(dist_cords, by = c(\"study_Ds\" = \"Districts\")) %>%\n                  rename(tolong = X, tolat = Y) %>%\n                  filter(study_Os == 20) %>% \n                  ungroup()\n\n  #from_Study <- from_Study %>% mutate(fromlong = dist32[1], fromlat = dist32[2])\n  \n  # Generate desire lines\n  from_flows <- gcIntermediate(\n                  p1 = select(from_Study, fromlong:fromlat),\n                  p2 = select(from_Study, tolong:tolat),\n                  sp = TRUE,\n                  addStartEnd = TRUE\n                )\n  from_flows <- SpatialLinesDataFrame(from_flows, from_Study)\n\n  # From all districts to Study Area district\n  to_Study <- trips_by_OD %>% \n                  left_join(dist_cords, by = c(\"study_Os\" = \"Districts\")) %>%\n                  rename(fromlong = X, fromlat = Y) %>%\n                  left_join(dist_cords, by = c(\"study_Ds\" = \"Districts\")) %>%\n                  rename(tolong = X, tolat = Y) %>%\n                  filter(study_Ds == 20) %>%\n                  ungroup()\n  \n  # to_Study <- to_Study %>% mutate(tolong = dist32[1], tolat = dist32[2])\n  \n  # Generate desire lines \n  to_flows <- gcIntermediate(\n              p1 = select(to_Study, fromlong:fromlat),\n              p2 = select(to_Study, tolong:tolat),\n              sp = TRUE,\n              addStartEnd = TRUE\n            )\n  \n  to_flows <- SpatialLinesDataFrame(to_flows, to_Study)\n\n  # Map both origins and destination flows to/from study area\n  trnFlows <- map %>%\n  addPolylines(\n    data = from_flows,\n    group = \"Origins\",\n    weight = ~ transit/100,\n    color = \"red\",\n    popup = ~paste0(\"Origins Trips: \", transit)\n  ) %>%\n  addCircleMarkers(\n    data = from_flows, \n    lng = from_flows$tolong, lat = from_flows$tolat, weight = 1, \n    label = ~as.character(format(round(from_flows$transit,0), big.mark = \",\")),\n    radius = 1,\n    labelOptions = labelOptions(noHide = T),\n    group = \"Origins\"\n  ) %>%\n  addPolylines(\n    data = to_flows,\n    group = \"Destinations\",\n    weight = ~ transit/100,\n    color = \"blue\",\n    popup = ~paste0(\"Destinations Trips: \", transit)\n  ) %>%\n  addCircleMarkers(\n    data = to_flows, \n    lng = to_flows$fromlong, lat = to_flows$fromlat, weight = 1, \n    label =   ~as.character(format(round(to_flows$transit,0), big.mark = \",\")), radius = 1, \n    labelOptions = labelOptions(noHide = T),  \n    group = \"Destinations\"\n  ) %>%\n  addLayersControl(\n        baseGroups = c(\"OSM\",\"Stamen\"),\n        overlayGroups = c(\"Districts\",\"Origins\", \"Destinations\", \"Districts Labels\",\"Flagler Corridor\"),\n        options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(c(\"Districts\", \"Destinations\", \"Districts Labels\"))\n\n  trnFlows\n  \n```\n\nCorridor level CTPP JTW transit origins and destinations\n\n```{r Corrior CTPP  trn flows, echo = FALSE}\n\n    trn_ctpp <- ctpp_flows %>% filter(modes == \"transit\")\n\n    trn_ods <- left_join(trn_ctpp %>% group_by(from) %>% summarise(trn_Origins = sum(Trips)),\n                     trn_ctpp %>% group_by(to) %>% summarise(trn_Destinations = sum(Trips)),\n                      by = c(\"from\" = \"to\")) %>%\n               rename(Districts = from) %>%\n               filter()\n               \n   shape@data <- left_join(shape@data, trn_ods, by = \"Districts\")\n        \n  map_Corridor_trn_ODs <- trnFlows %>%   \n  setView(lng = -80.27990, lat = 25.77110, zoom = 12) %>% \n # Trn Origins \n  addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n        weight = 1, \n        label =  ~as.character(format(round(shape$trn_Origins,0), big.mark = \",\")),\n        radius = 1, labelOptions = labelOptions(noHide = T),  \n        group = \"CTPP Origins\") %>%\n   # Trn Destinations \n   addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n        weight = 1, \n        label =  ~as.character(format(round(shape$trn_Destinations,0), big.mark = \",\")),\n        radius = 1, labelOptions = labelOptions(noHide = T),  \n        group = \"CTPP Destinations\") %>% \n  addLayersControl(\n        baseGroups = c(\"OSM\"),\n        overlayGroups = c(\"Districts\", \n                          \"CTPP Origins\", \"CTPP Destinations\"),\n        options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n\n  hideGroup(c(\"CTPP Destinations\"))\n  map_Corridor_trn_ODs\n\n```\n\n\n***\n## 5. Review of APC Data\nThe APC data was collected for 22 routes in the study area. The table shows list of routes with observed boardings.\n```{r APC data, echo=FALSE}\n\n # Read all route files in the directory\n  xlsFiles <- dir(apc_dir, pattern = \".xlsx\")\n\n  for (i in 1:length(xlsFiles)){\n    \n    apc_data_route <- read_excel(paste0(projDir,\"/\",apc_dir,\"/\",xlsFiles[i]), sheet = 1)\n    \n    ifelse(i ==1, apc_data <- apc_data_route, \n           apc_data <- bind_rows(apc_data, apc_data_route))\n  }\n\n # Get highlevel summaries\n route_boardings <- apc_data %>% \n                    group_by(ROUTE) %>% \n                    summarize(\n                      boardings = sum(DAY_ON),\n                      alightings = sum(DAY_OFF),\n                      total = sum(DAY_TOT)\n                      )\n \n # Add airsage districts to stops\n geocoded_stop_districts <- read.csv(apc_tag_districts)\n apc_data <- apc_data %>%\n              left_join(geocoded_stop_districts, \n                by = c(\"ROUTE\" = \"ROUTE\", \"STOPNAME\" = \"STOPNAME\")) %>%\n              rename(District = TAZ_Distri)\n \n # apc data for the study area\n study_apc_data <- apc_data %>% \n                   filter(District %in% Study_districts)\n \n study_route_boardings <- study_apc_data %>% \n                    group_by(ROUTE) %>% \n                    summarize(\n                      boardings = sum(DAY_ON),\n                      alightings = sum(DAY_OFF),\n                      total = sum(DAY_TOT)\n                      )\n \n summary_route <- route_boardings %>% \n                  left_join(study_route_boardings, \n                      by = \"ROUTE\",\n                      suffix = c(\"_Route\", \"_Flagler\")\n                   ) %>%\n                   add_marginals() %>%\n                   select(-total)\n \n summary_route[\"total\",\"ROUTE\"] <- 0\n \n # Print route boardings\n kable(summary_route,format.args = list(big.mark = \",\"), digits = 2)\n write.csv(summary_route, apc_trn_boardings, row.names = FALSE)\n \n # Map boardings by stops\n factpal <- colorFactor(topo.colors(22), apc_data$ROUTE)\n \n map_apc <- map %>%\n    addCircles(\n    data = apc_data, \n    lng = ~LONG, lat = ~LAT, weight = 1, \n    radius = ~DAY_TOT,\n    popup = ~ROUTE,\n    color = ~factpal(ROUTE),\n    group = \"Total\"\n  )  %>%\n  addCircles(\n    data = apc_data, \n    lng = ~LONG, lat = ~LAT, weight = 1, \n    radius = ~DAY_ON,\n    popup = ~ROUTE,\n    color = ~factpal(ROUTE),\n    group = \"Boardings\"\n  ) %>%\n  addCircles(\n    data = apc_data, \n    lng = ~LONG, lat = ~LAT, weight = 1, \n    radius = ~DAY_OFF,\n    popup = ~ROUTE,\n    color = ~factpal(ROUTE),\n    group = \"Alightings\"\n  ) %>%\n  addLayersControl(\n  baseGroups = c(\"OSM\"),\n  overlayGroups = c(\"Districts\",\"Boardings\", \"Alightings\", \"Total\"),\n  options = layersControlOptions(collapsed = FALSE)\n ) %>%\n\nhideGroup(c(\"Boardings\", \"Alightings\"))\nmap_apc\n   \nrm(map)\n\n```\n\n\n*** \n## 6. Review of Census Data (2015)\nThis section reviews census 2015 households, population, workers, number of zero auto and low income households. \n\nThere are about 84,000 households and 250,000 persons in the study area. The downtown districts 26 shows the highest number of households and population among the study area districts.   \n\nbelow shows population, households, workers\n\n\n\n```{r acs data, echo=FALSE, message=FALSE, warning=FALSE}\n\n# Add census shape files\nlayerName <- strsplit(strsplit(acs_shapeFile,\"[.]\")[[1]],\"/\")[[1]][2]\nacsShape <- readOGR(paste0(projDir,\"/\",acs_shapeFile), layer = layerName, verbose = FALSE)\n\n# Append acs data to shape\nacsData <- read_csv(acs_demoFile, skip = 1)\nacs_airsage <- read_csv(acs_airsage_dist)\nacs_airsage <- acs_airsage %>% select(GEO_ID, district_e)\n\n# re-write this to do all at once (via regex)\ncolnames(acsData) <- gsub( \" \", \"\", colnames(acsData) )\ncolnames(acsData) <- gsub( \",\", \"\", colnames(acsData) )\ncolnames(acsData) <- gsub( \"\\\\(\", \"\", colnames(acsData) )\ncolnames(acsData) <- gsub( \"\\\\)\", \"\", colnames(acsData) )\ncolnames(acsData) <- gsub( \"\\\\$\", \"x\", colnames(acsData) )\n\nacsData <- acsData %>% mutate(low_inc = as.numeric(x10000tox14999) + as.numeric(x15000tox24999) + as.numeric(x25000tox34999))\nacsData[is.na(acsData)] <- 0\nacsData <- acsData %>% mutate(Medianincomedollars = as.numeric(Medianincomedollars))\n \n# join data\nacsShape@data <- acsShape@data %>% left_join(acsData, by = c(\"AFFGEOID\" = \"Id\"))\n\n# Get demographics across flagler districts \nacsData <- acsData %>% left_join(acs_airsage,  c(\"Id\" = \"GEO_ID\"))\nstudy_acsData <- acsData %>% filter(district_e %in% Study_districts) %>%\n                   group_by(district_e) %>% \n                   mutate(low_inchh = low_inc * Households) %>%\n                   summarize(hh = sum(Households),\n                             pop = sum(Population),\n                             worker = sum(workers),\n                             zeroAutoPct = 100* sum(Zero_auto)/hh,\n                             lowIncPct = sum(low_inchh)/hh,\n                             MedInc = median(Medianincomedollars)) %>%\n                  add_marginals() %>% \n                  select(-total)\n                  \n print(kable(study_acsData,format.args = list(big.mark = \",\"), digits = 0)) \n\n```\n\n###### The following plots show the 2015 data at tract level for the corridor.\n\n  1. Review of households and population along the corridor\n  2. Review of Employment and worker data along the corridor\n  3. Review of zero car households\n  4. Review of low income\n\n\n\n```{r plot tracts, echo = FALSE, message=FALSE, warning=FALSE}\n\n# plot a tract map\nmap_tract <- leaflet() %>%\n  # Base Map\n  addProviderTiles(\"Stamen.Toner\",group = \"Stamen\") %>%\n  addTiles(group = \"OSM\") %>%\n  setView(lng = -80.27990, lat = 25.77110, zoom = 12) %>%\n  addTiles %>%\n  # add district shape files\n  addPolygons(\n    data = shape, group = \"Districts\", smoothFactor = 0.5,\n    stroke = TRUE,  weight = 3, color = \"black\",opacity = 1.0,\n    fill = FALSE)   %>% \n  # Add district names\n  addCircleMarkers(data = shape, lng = shape$X, lat = shape$Y, \n                   weight = 1, label =   ~as.character(shape$Districts), \n                   radius = 1, labelOptions = labelOptions(noHide = T),  \n                   group = \"Districts Labels\")\n \n# Add  color pallets\npal_hh <- colorNumeric(\n  palette = \"Blues\",\n  domain = acsShape$Households\n)\n\npal_pop <- colorNumeric(\n  palette = \"Reds\",\n  domain = acsShape$Population\n)\n\n```\n\n###### The map below displays households by census tracts\nThe census tract level data shown on the plot displays large number of households and population clusters along Flagler Corridor in districts 30 to 36.\n\n\n```{r plot hh, echo = FALSE, message=FALSE, warning=FALSE}\n\nmap_hh <- map_tract %>%\n  addPolygons(\n    data = acsShape, group = \"Households\", smoothFactor = 0.5,\n    stroke = TRUE,  weight = 1, color = \"grey\",opacity = 0.5,\n    fill = TRUE, fillOpacity = 0.5,\n    fillColor = ~pal_hh(Households)\n  )  %>%  \n   \n  addLegend(\n    \"bottomright\",pal = pal_hh, values = acsShape$Households,\n     title = \"Households\"\n   ) %>%\n  \n addLayersControl(\n  baseGroups = c(\"OSM\",\"Stamen\"),\n  overlayGroups = c(\"Districts\",\"Districts Labels\", \"Households\"),\n  options = layersControlOptions(collapsed = FALSE)\n )\n\nmap_hh\n```\n\nPlot of population by census tracts along the corridor:\nThis closely follows the number of households by tract.\n\n```{r plot pop, echo = FALSE, message=FALSE, warning=FALSE}\nmap_pop <- map_tract %>%\n  addPolygons(\n    data = acsShape, group = \"Population\",smoothFactor = 0.5,\n    stroke = TRUE,  weight = 1, color = \"grey\",opacity = 0.5,\n    fill = TRUE, fillOpacity = 0.5,\n    fillColor = ~pal_pop(Population)\n  )  %>%\n  \n  addLegend(\n    \"bottomleft\",pal = pal_pop, values = acsShape$Population,\n    title = \"Population\", layerId = 1\n  ) %>%\n  \n  addLayersControl(\n  baseGroups = c(\"OSM\",\"Stamen\"),\n  overlayGroups = c(\"Districts\", \"Districts Labels\", \"Population\"),\n  options = layersControlOptions(collapsed = FALSE)\n )\n\nmap_pop\n```\n\nPlot of household workers:\nNumber of workers in the household proportionaltely follows the population and total households by tracts. There are also large number of workers along the corridor. \n\n```{r worker, echo=FALSE, message=FALSE, warning=FALSE}\n\npal_work <- colorNumeric(\n  palette = \"Blues\",\n  domain = acsShape$workers\n)\n\npal_auto <- colorNumeric(\n  palette = \"Reds\",\n  domain = acsShape$Zero_auto\n)\n\npal_inc <- colorNumeric(\n  palette = \"Blues\",\n  domain = acsShape$Medianincomedollars\n)\n\n# Plot Employment densities along the corrido\nmap_Workers <- map_tract %>% \n  \n  addPolygons(\n    data = acsShape, group = \"Workers\",smoothFactor = 0.5,\n    stroke = TRUE,  weight = 1, color = \"grey\",opacity = 0.5,\n    fill = TRUE, fillOpacity = 0.5,\n    fillColor = ~pal_work(workers)\n  )  %>% \n  \n  addLegend(\n    \"bottomleft\",pal = pal_work, values = acsShape$workers,\n    title = \"Workers\", layerId = 2\n  ) %>%\n  \n addLayersControl(\n  baseGroups = c(\"OSM\",\"Stamen\"),\n  overlayGroups = c(\"Districts\", \"Districts Labels\", \"Workers\"),\n  options = layersControlOptions(collapsed = FALSE)\n  )\n  \nmap_Workers\n\n```\n\nPlot of zero car households:\nA higher percent of zero car households are observed in the downtown districts from district 26 to 28. The census tracts along the Flagler Corridor show very low percent of zero car households, implying vast majority of the residents drive to work.\n\n```{r zero auto, echo=FALSE, message=FALSE, warning=FALSE}\n# Plot zero car households along the corridor\nmap_zeroAuto <- map_tract %>% \n  addPolygons(\n    data = acsShape, group = \"Zero Car\",smoothFactor = 0.5,\n    stroke = TRUE,  weight = 1, color = \"grey\",opacity = 0.5,\n    fill = TRUE, fillOpacity = 0.5,\n    fillColor = ~pal_auto(Zero_auto)\n  ) %>% \n  \n  addLegend(\n    \"bottomright\",pal = pal_auto, values = acsShape$Zero_auto,\n     title = \"Zero Auto\"\n   ) %>%\n  \n addLayersControl(\n  baseGroups = c(\"OSM\",\"Stamen\"),\n  overlayGroups = c(\"Districts\", \"Districts Labels\", \"Zero auto\"),\n  options = layersControlOptions(collapsed = FALSE)\n  )\n  \nmap_zeroAuto\n```\n\nPlot of median income households:\nMost of the tracts along the corridor show a median income of less than $50,000. A significant number of tracts show median income of about $25,000 along the corridor. \n\n```{r median income, echo=FALSE, message=FALSE, warning=FALSE}\n# Plot median hh incomes along the corridor\nmap_medInc <- map_tract %>% \n  addPolygons(\n    data = acsShape, group = \"Med HH Income\",smoothFactor = 0.5,\n    stroke = TRUE,  weight = 1, color = \"grey\",opacity = 0.5,\n    fill = TRUE, fillOpacity = 0.5,\n    fillColor = ~pal_inc(Medianincomedollars),\n    popup = ~paste0(\"Median Income: \", Medianincomedollars)\n  ) %>% \n  \n  addLegend(\n    \"bottomright\",pal = pal_inc, values = acsShape$Medianincomedollars,\n     title = \"Med HH Income\"\n   ) %>%\n  \n addLayersControl(\n  baseGroups = c(\"OSM\",\"Stamen\"),\n  overlayGroups = c(\"Districts\", \"Districts Labels\", \"Med HH Income\"),\n  options = layersControlOptions(collapsed = FALSE)\n  )\n  \nmap_medInc\n\n```\n\n### 7) Market Analysis:\n\n#### Demographics\n1. Large number of resident households and population along the corridor, most with high densities along the corridor. \n2. Worker population is proprtional to households and population, meaning large worker concentrations along the corridor.\n3. Zero car households are predomint in the downtown districts and most of the residents in the corridor drive to work. Most of the downtown residents work in the downtown and rely upon transit to get to other places.\n4. From west to east of the corridor the median income by census tracts decreases from $65,000 to $16,000 in the downtown.\n\n\n\n",
    "created" : 1475777805567.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "426395604",
    "id" : "C04D1A9B",
    "lastKnownWriteTime" : 1477002515,
    "last_content_update" : 1477002515674,
    "path" : "~/Desktop/github/Flagler/airsage.Rmd",
    "project_path" : "airsage.Rmd",
    "properties" : {
        "docOutlineSize" : "180.93053261333097",
        "docOutlineVisible" : "1",
        "ignored_words" : "Airsage,AirSage,socio,Flagler,Trn,airsage,SZCount,offpeak,geocoded\n",
        "source_window_id" : ""
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}